if ("text" %in% names(p[[t]])) to.numeric(p[[t]]$text) else NA
}
cy(x[[2984]]$content$properties,"BC_1YEAR")
??to.numeric
?numeric
cy <- function(p,t) {
if ("text" %in% names(p[[t]])) as.numeric(p[[t]]$text) else NA
}
cy(x[[2984]]$content$properties,"BC_1YEAR")
digits=3
cy <- function(p,t) {
if ("text" %in% names(p[[t]]))
round(as.numeric(p[[t]]$text),digits)
else
NA
}
cy(x[[2984]]$content$properties,"BC_1YEAR")
digits=4
cy(x[[2984]]$content$properties,"BC_1YEAR")
cy <- function(p,t) {
if ("text" %in% names(p[[t]]))
round(as.double(p[[t]]$text),digits)
else
NA
}
cy(x[[2984]]$content$properties,"BC_1YEAR")
?round
cy <- function(p,t) {
if ("text" %in% names(p[[t]]))
round(as.double(p[[t]]$text),digits=digits)
else
NA
}
cy(x[[2984]]$content$properties,"BC_1YEAR")
digits=9
cy(x[[2984]]$content$properties,"BC_1YEAR")
cy <- function(p,t) {
if ("text" %in% names(p[[t]]))
signif(as.double(p[[t]]$text),digits=digits)
else
NA
}
cy(x[[2984]]$content$properties,"BC_1YEAR")
cy <- function(p,t) {
if ("text" %in% names(p[[t]]))
# signif(as.double(p[[t]]$text),digits=digits)
signif(p[[t]]$text,digits=digits)
else
NA
}
cy(x[[2984]]$content$properties,"BC_1YEAR")
cy <- function(p,t) {
if ("text" %in% names(p[[t]]))
signif(as.double(p[[t]]$text),digits=digits)
else
NA
}
p
cy <- function(p,t) {
if ("text" %in% names(p[[t]]))
signif(as.double(p[[t]]$text),digits=digits)
else
NA
}
y = ldply(x, function(e) {
p <- e$content$properties
c(cy(p,"BC_1YEAR"),
cy(p,"BC_30YEAR")),
.inform=TRUE)
y = ldply(x, function(e) {
p <- e$content$properties
c(cy(p,"BC_1YEAR"),
cy(p,"BC_30YEAR"))},
.inform=TRUE)
y
head(p)
head(y)
names(x)
names(x$content$properties)
p = x[[1]]$content$properties
names(p)
cy <- function(t,p) {
if ("text" %in% names(p[[t]]))
signif(as.double(p[[t]]$text),digits=digits)
else
NA
}
y = ldply(x, function(e) {
p <- e$content$properties
#c(cy(p,"BC_1YEAR"),
#  cy(p,"BC_30YEAR"))
q = sapply(names(p),cy,p)
},
.inform=TRUE)
head(y)
tail(y)
y = ldply(x, function(e) {
p <- e$content$properties
#c(cy(p,"BC_1YEAR"),
#  cy(p,"BC_30YEAR"))
q = sapply(names(p),cy,p)
},
.id="NEW_DATE",
.inform=TRUE)
head(y)
tail(y)
p
cy <- function(t,p) {
if ("text" %in% names(p[[t]]))
# signif(as.double(p[[t]]$text),digits=digits)
p[[t]]$text
else
NA
}
y = ldply(x, function(e) {
p <- e$content$properties
q = sapply(names(p),cy,p)
},
.id="NEW_DATE",
.inform=TRUE)
tail(y)
str(y)
tail(y)
y$NEW_DATE
?substring
substring(y$NEW_DATE,1,11)
substring(y$NEW_DATE,1,10)
y = ldply(x, function(e) {
p <- e$content$properties
q = sapply(names(p),cy,p)
},
.id="NEW_DATE",
.inform=TRUE)
y$NEW_DATE = substring(y$NEW_DATE,1,10)
tail(y)
head(y)
y = ldply(x, function(e) {
p <- e$content$properties
q = sapply(names(p),cy,p)
},
.id="NEW_DATE",
.inform=TRUE)
head(y)
ys = sort(y)
keyys = sort(y$NEW_DATE)
head(keyys)
head(y[keys])
head(y[keyys])
head(with(y,NEW_DATE=keyys))
ys = order(y,NEW_DAE)
ys = order(y,NEW_DATE)
ys = order(y,"NEW_DATE")
?order
keyys
y = ldply(x, function(e) {
p <- e$content$properties
q = sapply(names(p),cy,p)
},
.id="NEW_DATE",
.inform=TRUE)
y$NEW_DATE = substring(y$NEW_DATE,1,10)
keys = sort(y$NEW_DATE)
head(keys)
head(y)
head(y[with(y,order(NEW_DATE)),])
rownames(y) <- y$NEW_DATE
head(y)
y = ldply(x, function(e) {
p <- e$content$properties
q = sapply(names(p),cy,p)
},
.id="NEW_DATE",
.inform=TRUE)
y$NEW_DATE = substring(y$NEW_DATE,1,10)
y = y[with(y,order(NEW_DATE)),]
rownames(y) <- y$NEW_DATE
head(y)
y = y[,-1:3]
y = y[,3:10]
head(y)
y = ldply(x, function(e) {
p <- e$content$properties
q = sapply(names(p),cy,p)
},
.id="NEW_DATE",
.inform=TRUE)
y$NEW_DATE = substring(y$NEW_DATE,1,10)
y = y[with(y,order(NEW_DATE)),]
rownames(y) <- y$NEW_DATE
y = y[,3:10]
head(y)
y = ldply(x, function(e) {
p <- e$content$properties
q = sapply(names(p),cy,p)
},
.id="NEW_DATE",
.inform=TRUE)
y$NEW_DATE = substring(y$NEW_DATE,1,10)
y = y[with(y,order(NEW_DATE)),]
rownames(y) <- y$NEW_DATE
y = y[,3:20]
colnames(y)
y = ldply(x, function(e) {
p <- e$content$properties
q = sapply(names(p),cy,p)
},
.id="NEW_DATE",
.inform=TRUE)
y$NEW_DATE = substring(y$NEW_DATE,1,10)
y = y[with(y,order(NEW_DATE)),]
rownames(y) <- y$NEW_DATE
y = y[,3:14]
head(y)
yq = as.double(y)
head(h)
head(y)
as.double("<NA>")
?as.double
as.double(y[,1])
as.double(y[,2])
as.double(y[,3])
as.double(y[,4])
as.double(y[,5])
as.double(y[,6])
as.double(y[,7])
as.double(y[,8])
as.double(y[,9])
as.double(y[,10])
as.double(y[,11])
as.double(y[,12])
as.double(y[,13])
colnames(y)
yq = as.double(y[])
yq = transform(y,as.numeric)
yq
head(yq)
str(yq)
?transform
yq = sapply(y,as.numeric)
head(yq)
rownames(y)
?sapply
yq = sapply(y,as.numeric,simplify=FALSE)
head(yq)
rownames(yq)
yq = vapply(y,as.numeric,"dataframe",simplify=FALSE)
yq = vapply(y,as.numeric,"dataframe")
match.fun("dataframe")
str(y)
yq = vapply(y,as.numeric,"data.frame")
yq = sapply(y,as.numeric,simplify=FALSE)
str(yq)
yq = sapply(y,function(c){y[,c] = as.numeric(y[,c])},simplify=FALSE)
?apply
yq = apply(y,2,function(c){y[,c] = as.numeric(y[,c])})
y[,1]
colnames(y)
ncol(y)
for(i in 1:ncol(y)) y[,i] = as.double(y[,i])
head(y)
str(y)
apply(y,2,function(x) print(x))
yq = apply(y,2,function(x) as.double(x))
head(yq)
str(yq)
yq = data.frame(apply(y,2,function(x) as.double(x)))
head(yq)
str(yq)
y = ldply(x, function(e) {
p <- e$content$properties
q = sapply(names(p),cy,p)
},
.id="NEW_DATE",
.inform=TRUE)
# sort by date
y$NEW_DATE = substring(y$NEW_DATE,1,10)
y = y[with(y,order(NEW_DATE)),]
dates <- y$NEW_DATE
# trim the frame, convert to double, assign row names
y= data.frame(apply(y[,3:14],2,function(x) as.double(x)))
rownames(y) <- dates
head(y)
source('~/git/ustyc/R/yieldcurve.R')
x = xmlParse("bogus")
x
source('~/.active-rstudio-document')
x = getYieldCurve("bogus")
doc <- NULL
doc <- xmlParse(location)
if (doc == NULL) {
warning(paste("Could not parse the location",location))
return(NULL)
}
location
?warning
paste("could not",location)
warning(paste("could not",location))
doc
?is.null
doc <- NULL
doc <- xmlParse(location)
if (is.null(doc)) {
warning(paste("Could not parse the location",location))
return(NULL)
}
?message
source('~/.active-rstudio-document')
x = getYieldCurve()
source('~/.active-rstudio-document')
x = getYieldCurve()
head(x)
head(x,n=1)
head(x,n=2)
colnames(x)
rownames(x)
str(x)
head(x$df)
x$updates
x$updated
updated
head(x$df)
xt = xts(x$df,order.by=rownames(x$df))
require(xts)
xt = xts(x$df,order.by=rownames(x$df))
xt = xts(x$df,order.by=as.Date(rownames(x$df)))
str(xt)
head(xt)
require(lattice)
xyplot.ts(xt)
xyplot.ts(xt,superpose=TRUE)
?xyplot
xyplot.ts(xt,superpose=TRUE,auto.key=list(columns=4))
xyplot.ts(xt,superpose=TRUE,auto.key=list(columns=4),ylab="Yield (%)")
xyplot.ts(xt)
xyplot.ts(xt,scales=list(relation="same"))
xyplot.ts(xt,scales=list(y=list(relation="same")))
xyplot.ts(xt,scales=list(y=list(relation="same")),ylab="Yield (%)")
# xyplot.ts(xt,scales=list(y=list(relation="same")),ylab="Yield (%)")
head(xt)
source('~/.active-rstudio-document')
x = getYieldCurve(year=2014)
base
location <- base
yloc <- mloc <- NULL
year=2014
yloc = ifelse(is.null(year),year,paste("year(NEW_DATE)%20eq%20",year,sep=''))
yloc
mloc = ifelse(is.null(month),year,paste("month(NEW_DATE)%20eq%20",month,sep=''))
month=NULL
mloc = ifelse(is.null(month),year,paste("month(NEW_DATE)%20eq%20",month,sep=''))
parameters <- ""
if (is.null(yloc)==FALSE && is.null(mloc)==FALSE)
parameters = paste("$filter=",mloc,"%20and%20",yloc,sep='')
else {
if (is.null(yloc)==FALSE)
parameters = paste("$filter=",yloc,sep='')
if (is.null(mloc)==FALSE)
parameters = paste("$filter=",mloc,sep='')
}
parameters <- ""
if (is.null(yloc)==FALSE && is.null(mloc)==FALSE)
parameters = paste("$filter=",mloc,"%20and%20",yloc,sep='')
else {
if (is.null(yloc)==FALSE)
parameters = paste("$filter=",yloc,sep='')
if (is.null(mloc)==FALSE)
parameters = paste("$filter=",mloc,sep='')
}
parameters
yloc = ifelse(is.null(year),year,paste("year(NEW_DATE)%20eq%20",year,sep=''))
mloc = ifelse(is.null(month),month,paste("month(NEW_DATE)%20eq%20",month,sep=''))
location <- base
yloc = ifelse(is.null(year),year,paste("year(NEW_DATE)%20eq%20",year,sep=''))
mloc = ifelse(is.null(month),month,paste("month(NEW_DATE)%20eq%20",month,sep=''))
location <- base
yloc = ifelse(is.null(year),NULL,paste("year(NEW_DATE)%20eq%20",year,sep=''))
mloc = ifelse(is.null(month),NULL,paste("month(NEW_DATE)%20eq%20",month,sep=''))
location <- base
yloc <- mloc <- NULL
yloc <- if(is.null(year)==FALSE) paste("year(NEW_DATE)%20eq%20",year,sep='')
mloc <- if(is.null(month)==FALSE) paste("month(NEW_DATE)%20eq%20",month,sep='')
mloc
yloc
parameters <- ""
if (is.null(yloc)==FALSE && is.null(mloc)==FALSE)
parameters = paste("$filter=",mloc,"%20and%20",yloc,sep='')
else {
parameters <- ""
if (is.null(yloc)==FALSE && is.null(mloc)==FALSE) {
parameters = paste("$filter=",mloc,"%20and%20",yloc,sep='')
} else {
if (is.null(yloc)==FALSE)
parameters = paste("$filter=",yloc,sep='')
if (is.null(mloc)==FALSE)
parameters = paste("$filter=",mloc,sep='')
}
parameters
doc <- NULL
doc <- xmlParse(paste(location,parameters,sep=''))
paste(location,parameters,sep='')
parameters <- ""
if (is.null(yloc)==FALSE && is.null(mloc)==FALSE) {
parameters = paste("?$filter=",mloc,"%20and%20",yloc,sep='')
} else {
if (is.null(yloc)==FALSE)
parameters = paste("?$filter=",yloc,sep='')
if (is.null(mloc)==FALSE)
parameters = paste("?$filter=",mloc,sep='')
}
doc <- NULL
doc <- xmlParse(paste(location,parameters,sep=''))
head(doc$df)
doc
if (is.null(doc)) {
warning(paste("Could not parse the location",location))
return(NULL)
}
message("Download and parse complete.  Converting to list...")
x <- xmlToList(doc)
message("List conversion complete.  Converting to frame...")
# save the updated time
updated = x[[3]]
# truncate first four elements and the last element
x[1:4] <- NULL
x[[length(x)]] <- NULL
cy <- function(t,p) {
if ("text" %in% names(p[[t]]))
p[[t]]$text
else
NA
}
y = ldply(x, function(e) {
p <- e$content$properties
q = sapply(names(p),cy,p)
},
.id="NEW_DATE",
.inform=TRUE)
# sort by date
y$NEW_DATE = substring(y$NEW_DATE,1,10)
y = y[with(y,order(NEW_DATE)),]
dates <- y$NEW_DATE
# trim the columns, convert remainder to double, assign row names
y= data.frame(apply(y[,3:14],2,function(x) as.double(x)))
rownames(y) <- dates
message("Frame conversion complete.")
x = list(updated=updated,df=y)
str(x)
plot(x$df)
xt = xts(x$df,order.by=as.Date(rownames(x$df)))
xyplot.ts(xt,scales=list(y=list(relation="same")),ylab="Yield (%)")
xyplot.ts(xt,superpose=TRUE,auto.key=list(columns=4),ylab="Yield (%)")
source('~/.active-rstudio-document')
x = getYieldCurve(year=2013,month=2)
xt = xts(x$df,order.by=as.Date(rownames(x$df)))
xyplot.ts(xt,superpose=TRUE,auto.key=list(columns=4),ylab="Yield (%)")
x = getYieldCurve(year=2012)
ncol(x)
ncol(x$df)
?ldply
source('~/.active-rstudio-document')
x = getYieldCurve(parallel=TRUE)
require(doParallel)
cluster <- makeCluster(2) # or use detectCores()
registerDoParallel(cluster)
x = getYieldCurve(parallel=TRUE)
parallel
source('~/git/ustyc/R/yieldcurve.R')
cluster <- makeCluster(detectCores()) # or use detectCores()
registerDoParallel(cluster)
x = getYieldCurve(allowParallel=TRUE)
source('~/git/ustyc/R/summary.ustyc.R')
summary(x)
source('~/git/ustyc/R/summary.ustyc.R')
summary(x)
names(x)
nrow(x$df)
#' @export
summary.ustyc <- function(object,...) {
results <- c(nrow(object$df),object$month,object$year,object$updated)
names(results) <- c("rows","month","year","updated")
results
}
str(x)
summary(x)
x$month
x$year
c(nrow(x$df),x$month,x$year,x$updated)
x$query
source('~/.active-rstudio-document')
summary(x)
?install.github
?install_github
require(ustyc)
check()
check()
check()
browseVignettes("ustyc")
install()
browseVignettes(package="ustyc")
browseVignettes(package="ustyc")
check()
check()
check()
check()
setwd("~/git/ustyc")
check()
check()
check()
browseVignettes(package="ustyc")
install()
browseVignettes(package="ustyc")
library(ustyc)
